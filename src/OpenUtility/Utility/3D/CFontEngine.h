#ifndef _CFontEngine_h	#define _CFontEngine_h#include "../Stream/Stream.h"#include "../../Template/CVector.h"#include "CTexture.h"#include <stdio.h>#include <ft2build.h>#include FT_FREETYPE_Hnamespace OpenUtility{class CFontLoader{public:	class CFontEngine	{	public:		enum EHAlign		{			EHAlignLeft,			EHAlignCenter,			EHAlignRight		};		enum EVAlign		{			EVAlignTop,			EVAlignMiddle,			EVAlignBaseligne,			EVAlignBottom		};	public:		CFontEngine(const CFontLoader *loader) : FontLoader(loader) {}		virtual ~CFontEngine() {}		virtual void SetText(const char *text,EHAlign hAlign=EHAlignLeft,EVAlign vAlign=EVAlignBaseligne)=0;		virtual void UpdateText(const char *text)=0;		virtual void SetAlignement(EHAlign hAlign=EHAlignLeft,EVAlign vAlign=EVAlignBaseligne)=0;		virtual void DrawText()=0;	protected:		const CFontLoader *FontLoader;	};private:	struct SFontChar	{		unsigned int texX,texY,texW,texH;		unsigned int BearingX,BearingY;		unsigned int Advance;	};public:	CFontLoader(const char *font,unsigned int size,const char *cache=NULL);	~CFontLoader();	CFontLoader(const CFontLoader &obj);	CFontLoader& operator=(const CFontLoader &obj);	inline CTexture* GetFontTexture() {return(FontTexture);}	inline const SFontChar* GetCharData(unsigned char c) const {return(&CharsData[c]);}private:	bool GenFont(CStream &file,unsigned int size);	bool ReadFont(CStream &file);	void PutFile16b(FILE *fp,int val);	int GetFile16b(FILE *fp);	bool WritePngBitmap(FILE *fp,unsigned char *bitmap,unsigned int width,unsigned int height);	unsigned char* ReadPngBitmap(FILE *fp,unsigned int &width,unsigned int &height);private:	bool isInit;	FT_Library library;	FT_Face face;	CTexture *FontTexture;	SFontChar CharsData[256];};}#endif